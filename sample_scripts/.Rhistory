source("C:/Users/sdgeo/Dropbox/Own/Programming/R/R_Utilities/tools/Drug_Package.R")
source("C:/Users/sdgeo/Dropbox/Own/Programming/R/R_Utilities/tools/Utility_package.R")
source("C:/Users/sdgeo/Dropbox/Own/Programming/R/R_Utilities/tools/CrisprFunctionScripts.R")
data <- import_plate_range("C:/Users/sdgeo/Dropbox/Own/Programming/R/hM1A_LYE.xlsx", "A8:I13")
View(data)
data <- import_plate_range("C:/Users/sdgeo/Dropbox/Own/Programming/R/hM1A_LYE.xlsx", "A8:K14")
View(data)
data_kill <- kill_efect_matrix(data)
data_kill <- kill_effect_matrix(data)
View(kill_effect_matrix)
source("C:/Users/sdgeo/Dropbox/Own/Programming/R/R_Utilities/tools/Drug_Package.R")
source("C:/Users/sdgeo/Dropbox/Own/Programming/R/R_Utilities/tools/Utility_package.R")
source("C:/Users/sdgeo/Dropbox/Own/Programming/R/R_Utilities/tools/CrisprFunctionScripts.R")
data_kill <- kill_effect_matrix(data, )
data_kill <- kill_effect_matrix(data)
View(data_kill)
data_bliss <- bliss_calculator(data)
View(data_bliss)
data <- import_plate_range("C:/Users/sdgeo/Dropbox/Own/Programming/R/hM1A_LYE.xlsx", "A8:K14")
data_bliss <- bliss_calculator(data)
print(data[1,1])
print(data[1,i])
print(i)
for (item in 1:ncol(data)){
print(i)
}
print(item)
print(data[1,item])
for (item in 1:ncol(data)){
print(data[1,item])
}
cols_to_keep = c()
for (item in 1:ncol(data)){
curr_item = data[1,item]
if( curr_item < 0.95) {
print(curr_item)
}
}
print(item)
for (item in 1:ncol(data)){
curr_item = data[1,item]
if( curr_item < 0.95) {
print(item)
}
}
for (item in 1:ncol(data)){
curr_item = data[1,item]
if( curr_item < 0.95) {
cols_to_keep = cols_to_keep + c(item)
}
}
for (item in 1:ncol(data)){
curr_item = data[1,item]
if( curr_item < 0.95) {
cols_to_keep = c(cols_to_keep,item)
}
}
row_to_keep = c()
for (item in 1:nrow(data)){
curr_item = data[item, item]
if( curr_item < 0.95) {
row_to_keep = c(cols_to_keep,item)
}
}
for (item in 1:nrow(data)){
curr_item = data[item, 1]
if( curr_item < 0.95) {
row_to_keep = c(cols_to_keep,item)
}
}
row_to_keep = c()
for (item in 1:nrow(data)){
curr_item = data[item, 1]
if( curr_item < 0.95) {
row_to_keep = c(cols_to_keep,item)
}
}
row_to_keep = c()
for (item in 1:nrow(data)){
curr_item = data[item, 1]
if( curr_item < 0.95) {
row_to_keep = c(row_to_keep,item)
}
}
keep <- data[row_to_keep, cols_to_keep]
View(keep)
row_to_keep = row_to_keep -1
row_to_keep = row_to_keep -1
cols_to_keep = c()
row_to_keep = c()
for (item in 1:ncol(data)){
curr_item = data[1,item]
if( curr_item < 0.95) {
cols_to_keep = c(cols_to_keep,item)
}
}
for (item in 1:nrow(data)){
curr_item = data[item, 1]
if( curr_item < 0.95) {
row_to_keep = c(row_to_keep,item)
}
}
row_to_keep = row_to_keep - 1
cols_to_keep = cols_to_keep - 1
keep <- data[row_to_keep, cols_to_keep]
keep <- data[row_to_keep, cols_to_keep]
keep <- data[row_to_keep, cols_to_keep]
keep <- data[row_to_keep, cols_to_keep]
keep <- data_bliss[row_to_keep, cols_to_keep]
build_parsed_bliss_map <- function(growth_effect_matrix, max_gi50 = 0.95){
data_bliss <- bliss_calculator(growth_effect_matrix)
cols_to_keep = c()
row_to_keep = c()
for (item in 1:ncol(growth_effect_matrix)){
curr_item = growth_effect_matrix[1,item]
if( curr_item < max_gi50) {
cols_to_keep = c(cols_to_keep,item)
}
}
for (item in 1:nrow(growth_effect_matrix)){
curr_item = growth_effect_matrix[item, 1]
if( curr_item < max_gi50) {
row_to_keep = c(row_to_keep,item)
}
}
row_to_keep = row_to_keep - 1
cols_to_keep = cols_to_keep - 1
keep <- data_bliss[row_to_keep, cols_to_keep]
return(keep)
}
parsed = build_parsed_bliss_map(data)
View(parsed)
build_parsed_bliss_map <- function(growth_effect_matrix, max_gi50 = 0.95, min_gi50 = 0.05){
data_bliss <- bliss_calculator(growth_effect_matrix)
cols_to_keep = c()
row_to_keep = c()
for (item in 1:ncol(growth_effect_matrix)){
curr_item = growth_effect_matrix[1,item]
if( curr_item < max_gi50 && curr_item > min_gi50) {
cols_to_keep = c(cols_to_keep,item)
}
}
for (item in 1:nrow(growth_effect_matrix)){
curr_item = growth_effect_matrix[item, 1]
if( curr_item < max_gi50 && curr_item > min_gi50) {
row_to_keep = c(row_to_keep,item)
}
}
row_to_keep = row_to_keep - 1
cols_to_keep = cols_to_keep - 1
keep <- data_bliss[row_to_keep, cols_to_keep]
return(keep)
}
parsed = build_parsed_bliss_map(data)
View(parsed)
parsed = build_parsed_bliss_map(data)
